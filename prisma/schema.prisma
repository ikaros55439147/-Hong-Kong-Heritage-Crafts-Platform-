// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid()) @db.Uuid
  email             String   @unique
  passwordHash      String?  @map("password_hash") // 社交登入時可為空
  firstName         String?  @map("first_name")
  lastName          String?  @map("last_name")
  role              UserRole @default(LEARNER)
  preferredLanguage String   @default("zh-HK") @map("preferred_language")
  emailVerified     DateTime? @map("email_verified")
  image             String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  craftsmanProfile         CraftsmanProfile?
  bookings                 Booking[]
  orders                   Order[]
  mediaFiles               MediaFile[]
  following                Follow[]                  @relation("UserFollowing")
  followers                Follow[]                  @relation("UserFollowers")
  learningProgress         LearningProgress[]
  notifications            Notification[]
  notificationPreferences  NotificationPreference?
  comments                 Comment[]
  likes                    Like[]
  reports                  Report[]                  @relation("UserReports")
  reviewedReports          Report[]                  @relation("UserReviews")
  organizedEvents          Event[]                   @relation("EventOrganizer")
  eventRegistrations       EventRegistration[]
  contentVersions          ContentVersion[]
  contentSchedules         ContentSchedule[]
  contentTagAssociations   ContentTagAssociation[]
  contentAuditLogs         ContentAuditLog[]
  // E-commerce enhancements
  createdCoupons           Coupon[]
  createdPromotions        Promotion[]
  productReviews           ProductReview[]
  reviewHelpfulness        ReviewHelpfulness[]
  productInteractions      UserProductInteraction[]
  productRecommendations   ProductRecommendation[]
  pushSubscriptions        PushSubscription[]
  // NextAuth relations
  accounts                 Account[]
  sessions                 Session[]

  @@map("users")
}

model CraftsmanProfile {
  id                 String             @id @default(uuid()) @db.Uuid
  userId             String             @unique @map("user_id") @db.Uuid
  craftSpecialties   String[]           @map("craft_specialties")
  bio                Json? // Multi-language bio
  experienceYears    Int?               @map("experience_years")
  workshopLocation   String?            @map("workshop_location")
  contactInfo        Json?              @map("contact_info")
  verificationStatus VerificationStatus @default(PENDING) @map("verification_status")
  createdAt          DateTime           @default(now()) @map("created_at")

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses         Course[]
  products        Product[]
  inventoryAlerts InventoryAlert[]

  @@map("craftsman_profiles")
}

model Course {
  id              String      @id @default(uuid()) @db.Uuid
  craftsmanId     String      @map("craftsman_id") @db.Uuid
  title           Json // Multi-language title
  description     Json? // Multi-language description
  craftCategory   String      @map("craft_category")
  maxParticipants Int?        @map("max_participants")
  durationHours   Decimal?    @map("duration_hours") @db.Decimal(4, 2)
  price           Decimal?    @db.Decimal(10, 2)
  status          CourseStatus @default(ACTIVE)
  createdAt       DateTime    @default(now()) @map("created_at")

  // Relations
  craftsman        CraftsmanProfile @relation(fields: [craftsmanId], references: [id])
  bookings         Booking[]
  learningMaterials LearningMaterial[]

  @@map("courses")
}

model Booking {
  id        String        @id @default(uuid()) @db.Uuid
  userId    String        @map("user_id") @db.Uuid
  courseId  String        @map("course_id") @db.Uuid
  status    BookingStatus @default(PENDING)
  notes     String?
  createdAt DateTime      @default(now()) @map("created_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@map("bookings")
}

model Product {
  id                String        @id @default(uuid()) @db.Uuid
  craftsmanId       String        @map("craftsman_id") @db.Uuid
  name              Json // Multi-language product name
  description       Json? // Multi-language description
  price             Decimal       @db.Decimal(10, 2)
  inventoryQuantity Int           @default(0) @map("inventory_quantity")
  isCustomizable    Boolean       @default(false) @map("is_customizable")
  craftCategory     String        @map("craft_category")
  status            ProductStatus @default(ACTIVE)
  averageRating     Decimal?      @default(0) @map("average_rating") @db.Decimal(3, 2)
  reviewCount       Int           @default(0) @map("review_count")
  createdAt         DateTime      @default(now()) @map("created_at")

  // Relations
  craftsman                CraftsmanProfile           @relation(fields: [craftsmanId], references: [id])
  orderItems               OrderItem[]
  reviews                  ProductReview[]
  inventoryAlerts          InventoryAlert[]
  userInteractions         UserProductInteraction[]
  recommendations          ProductRecommendation[]    @relation("ProductRecommendations")
  recommendedProducts      ProductRecommendation[]    @relation("RecommendedProducts")
  promotionProducts        PromotionProduct[]

  @@map("products")
}

model Order {
  id                String        @id @default(uuid()) @db.Uuid
  userId            String        @map("user_id") @db.Uuid
  totalAmount       Decimal       @map("total_amount") @db.Decimal(10, 2)
  status            OrderStatus   @default(PENDING)
  shippingAddress   Json?         @map("shipping_address")
  paymentStatus     PaymentStatus @default(PENDING) @map("payment_status")
  couponId          String?       @map("coupon_id") @db.Uuid
  couponDiscount    Decimal       @default(0) @map("coupon_discount") @db.Decimal(10, 2)
  promotionDiscount Decimal       @default(0) @map("promotion_discount") @db.Decimal(10, 2)
  createdAt         DateTime      @default(now()) @map("created_at")

  // Relations
  user           User            @relation(fields: [userId], references: [id])
  coupon         Coupon?         @relation(fields: [couponId], references: [id])
  orderItems     OrderItem[]
  productReviews ProductReview[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid()) @db.Uuid
  orderId   String  @map("order_id") @db.Uuid
  productId String  @map("product_id") @db.Uuid
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model MediaFile {
  id         String    @id @default(uuid()) @db.Uuid
  uploaderId String    @map("uploader_id") @db.Uuid
  fileType   String    @map("file_type")
  fileUrl    String    @map("file_url")
  fileSize   BigInt?   @map("file_size")
  metadata   Json?
  createdAt  DateTime  @default(now()) @map("created_at")

  // Relations
  uploader          User               @relation(fields: [uploaderId], references: [id])
  learningMaterials LearningMaterial[]
  eventMediaFiles   EventMediaFile[]

  @@map("media_files")
}

model Follow {
  id          String   @id @default(uuid()) @db.Uuid
  followerId  String   @map("follower_id") @db.Uuid
  followingId String   @map("following_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  follower  User @relation("UserFollowing", fields: [followerId], references: [id])
  following User @relation("UserFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("follows")
}

model LearningMaterial {
  id          String              @id @default(uuid()) @db.Uuid
  courseId    String              @map("course_id") @db.Uuid
  title       Json // Multi-language title
  description Json? // Multi-language description
  type        LearningMaterialType
  content     Json? // Structured content (text, steps, etc.)
  mediaFileId String?             @map("media_file_id") @db.Uuid
  orderIndex  Int                 @map("order_index") @default(0)
  isRequired  Boolean             @default(true) @map("is_required")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")

  // Relations
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  mediaFile MediaFile? @relation(fields: [mediaFileId], references: [id])
  progress  LearningProgress[]

  @@map("learning_materials")
}

model LearningProgress {
  id                 String   @id @default(uuid()) @db.Uuid
  userId             String   @map("user_id") @db.Uuid
  learningMaterialId String   @map("learning_material_id") @db.Uuid
  completed          Boolean  @default(false)
  completedAt        DateTime? @map("completed_at")
  notes              String?
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relations
  user             User             @relation(fields: [userId], references: [id])
  learningMaterial LearningMaterial @relation(fields: [learningMaterialId], references: [id], onDelete: Cascade)

  @@unique([userId, learningMaterialId])
  @@map("learning_progress")
}

model Notification {
  id        String           @id @default(uuid()) @db.Uuid
  userId    String           @map("user_id") @db.Uuid
  type      NotificationType
  title     Json // Multi-language title
  message   Json // Multi-language message
  metadata  Json? // Additional data like IDs, URLs, etc.
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationPreference {
  id                    String   @id @default(uuid()) @db.Uuid
  userId                String   @unique @map("user_id") @db.Uuid
  emailNotifications    Boolean  @default(true) @map("email_notifications")
  pushNotifications     Boolean  @default(true) @map("push_notifications")
  newFollowerNotify     Boolean  @default(true) @map("new_follower_notify")
  courseUpdateNotify    Boolean  @default(true) @map("course_update_notify")
  productUpdateNotify   Boolean  @default(true) @map("product_update_notify")
  orderStatusNotify     Boolean  @default(true) @map("order_status_notify")
  craftsmanStatusNotify Boolean  @default(true) @map("craftsman_status_notify")
  eventNotify           Boolean  @default(true) @map("event_notify")
  commentNotify         Boolean  @default(true) @map("comment_notify")
  likeNotify            Boolean  @default(true) @map("like_notify")
  reminderNotify        Boolean  @default(true) @map("reminder_notify")
  marketingNotify       Boolean  @default(false) @map("marketing_notify")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model Comment {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @map("user_id") @db.Uuid
  entityType  EntityType  @map("entity_type")
  entityId    String      @map("entity_id") @db.Uuid
  parentId    String?     @map("parent_id") @db.Uuid
  content     String
  isReported  Boolean     @default(false) @map("is_reported")
  isApproved  Boolean     @default(true) @map("is_approved")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
  likes    Like[]
  reports  Report[]

  @@map("comments")
}

model Like {
  id         String     @id @default(uuid()) @db.Uuid
  userId     String     @map("user_id") @db.Uuid
  entityType EntityType @map("entity_type")
  entityId   String     @map("entity_id") @db.Uuid
  createdAt  DateTime   @default(now()) @map("created_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@unique([userId, entityType, entityId])
  @@map("likes")
}

model Report {
  id          String     @id @default(uuid()) @db.Uuid
  reporterId  String     @map("reporter_id") @db.Uuid
  entityType  EntityType @map("entity_type")
  entityId    String     @map("entity_id") @db.Uuid
  reason      String
  description String?
  status      ReportStatus @default(PENDING)
  reviewedBy  String?    @map("reviewed_by") @db.Uuid
  reviewedAt  DateTime?  @map("reviewed_at")
  createdAt   DateTime   @default(now()) @map("created_at")

  // Relations
  reporter  User     @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  reviewer  User?    @relation("UserReviews", fields: [reviewedBy], references: [id])
  comment   Comment? @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model Event {
  id              String      @id @default(uuid()) @db.Uuid
  organizerId     String      @map("organizer_id") @db.Uuid
  title           Json // Multi-language title
  description     Json? // Multi-language description
  eventType       EventType   @map("event_type")
  category        String // craft category or general category
  startDateTime   DateTime    @map("start_date_time")
  endDateTime     DateTime    @map("end_date_time")
  timezone        String      @default("Asia/Hong_Kong")
  location        Json? // Physical or virtual location details
  maxParticipants Int?        @map("max_participants")
  registrationFee Decimal?    @map("registration_fee") @db.Decimal(10, 2)
  status          EventStatus @default(DRAFT)
  isPublic        Boolean     @default(true) @map("is_public")
  tags            String[]
  requirements    Json? // Prerequisites or requirements
  materials       Json? // Required materials list
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relations
  organizer       User                @relation("EventOrganizer", fields: [organizerId], references: [id], onDelete: Cascade)
  registrations   EventRegistration[]
  mediaFiles      EventMediaFile[]

  @@map("events")
}

model EventRegistration {
  id             String                   @id @default(uuid()) @db.Uuid
  eventId        String                   @map("event_id") @db.Uuid
  userId         String                   @map("user_id") @db.Uuid
  status         EventRegistrationStatus  @default(PENDING)
  registeredAt   DateTime                 @default(now()) @map("registered_at")
  attendedAt     DateTime?                @map("attended_at")
  feedback       String?
  rating         Int? // 1-5 stars
  notes          String? // Special requirements or notes
  createdAt      DateTime                 @default(now()) @map("created_at")
  updatedAt      DateTime                 @updatedAt @map("updated_at")

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_registrations")
}

model EventMediaFile {
  id          String    @id @default(uuid()) @db.Uuid
  eventId     String    @map("event_id") @db.Uuid
  mediaFileId String    @map("media_file_id") @db.Uuid
  type        String // 'banner', 'gallery', 'material'
  orderIndex  Int       @default(0) @map("order_index")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  mediaFile MediaFile @relation(fields: [mediaFileId], references: [id], onDelete: Cascade)

  @@map("event_media_files")
}

model TranslationCache {
  id               String   @id @default(uuid()) @db.Uuid
  sourceText       String   @map("source_text")
  sourceLanguage   String   @map("source_language")
  targetLanguage   String   @map("target_language")
  translatedText   String   @map("translated_text")
  provider         String
  quality          Json? // TranslationQuality object
  createdAt        DateTime @default(now()) @map("created_at")
  lastUsed         DateTime @default(now()) @map("last_used")
  useCount         Int      @default(1) @map("use_count")

  @@unique([sourceText, sourceLanguage, targetLanguage])
  @@index([sourceLanguage, targetLanguage])
  @@index([lastUsed])
  @@map("translation_cache")
}

// Enums
enum UserRole {
  LEARNER
  CRAFTSMAN
  ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum LearningMaterialType {
  VIDEO
  DOCUMENT
  IMAGE
  STEP_BY_STEP
  QUIZ
  ASSIGNMENT
}

enum NotificationType {
  NEW_FOLLOWER
  COURSE_UPDATE
  PRODUCT_UPDATE
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  ORDER_STATUS_UPDATE
  PAYMENT_RECEIVED
  COURSE_REMINDER
  ACTIVITY_UPDATE
}

enum EntityType {
  COURSE
  PRODUCT
  CRAFTSMAN_PROFILE
  COMMENT
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

enum EventType {
  WORKSHOP
  EXHIBITION
  DEMONSTRATION
  COMPETITION
  CULTURAL_TOUR
  ONLINE_WEBINAR
  NETWORKING
  FESTIVAL
}

enum EventStatus {
  DRAFT
  PUBLISHED
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EventRegistrationStatus {
  PENDING
  CONFIRMED
  WAITLISTED
  CANCELLED
  ATTENDED
  NO_SHOW
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum PromotionType {
  BUY_ONE_GET_ONE
  BULK_DISCOUNT
  CATEGORY_SALE
  FLASH_SALE
}

enum AlertType {
  LOW_STOCK
  OUT_OF_STOCK
  RESTOCK_REMINDER
}

enum InteractionType {
  VIEW
  LIKE
  CART_ADD
  PURCHASE
  REVIEW
}

enum RecommendationType {
  SIMILAR_PRODUCTS
  FREQUENTLY_BOUGHT_TOGETHER
  PERSONALIZED
  TRENDING
}

// Content Management Models
model ContentVersion {
  id             String    @id @default(uuid()) @db.Uuid
  entityType     String    @map("entity_type")
  entityId       String    @map("entity_id") @db.Uuid
  versionNumber  Int       @default(1) @map("version_number")
  contentData    Json      @map("content_data")
  changeSummary  String?   @map("change_summary")
  createdBy      String    @map("created_by") @db.Uuid
  createdAt      DateTime  @default(now()) @map("created_at")
  isPublished    Boolean   @default(false) @map("is_published")
  publishedAt    DateTime? @map("published_at")

  // Relations
  creator User @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@unique([entityType, entityId, versionNumber])
  @@map("content_versions")
}

model ContentSchedule {
  id           String    @id @default(uuid()) @db.Uuid
  entityType   String    @map("entity_type")
  entityId     String    @map("entity_id") @db.Uuid
  actionType   String    @map("action_type")
  scheduledAt  DateTime  @map("scheduled_at")
  contentData  Json?     @map("content_data")
  status       String    @default("pending")
  executedAt   DateTime? @map("executed_at")
  errorMessage String?   @map("error_message")
  createdBy    String    @map("created_by") @db.Uuid
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  creator User @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("content_schedules")
}

model ContentTag {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  color       String? // Hex color code
  category    String? // 'craft_type', 'difficulty', 'theme', etc.
  isSystemTag Boolean  @default(false) @map("is_system_tag")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  associations ContentTagAssociation[]

  @@unique([name, category])
  @@map("content_tags")
}

model ContentTagAssociation {
  id              String   @id @default(uuid()) @db.Uuid
  entityType      String   @map("entity_type")
  entityId        String   @map("entity_id") @db.Uuid
  tagId           String   @map("tag_id") @db.Uuid
  confidenceScore Decimal? @map("confidence_score") @db.Decimal(3, 2)
  createdBy       String?  @map("created_by") @db.Uuid
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  tag     ContentTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  creator User?      @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  @@unique([entityType, entityId, tagId])
  @@map("content_tag_associations")
}

model ContentQualityScore {
  id                     String   @id @default(uuid()) @db.Uuid
  entityType             String   @map("entity_type")
  entityId               String   @map("entity_id") @db.Uuid
  overallScore           Decimal  @default(0.00) @map("overall_score") @db.Decimal(3, 2)
  completenessScore      Decimal  @default(0.00) @map("completeness_score") @db.Decimal(3, 2)
  accuracyScore          Decimal  @default(0.00) @map("accuracy_score") @db.Decimal(3, 2)
  engagementScore        Decimal  @default(0.00) @map("engagement_score") @db.Decimal(3, 2)
  multimediaScore        Decimal  @default(0.00) @map("multimedia_score") @db.Decimal(3, 2)
  languageQualityScore   Decimal  @default(0.00) @map("language_quality_score") @db.Decimal(3, 2)
  
  // Metrics
  viewCount              Int      @default(0) @map("view_count")
  likeCount              Int      @default(0) @map("like_count")
  commentCount           Int      @default(0) @map("comment_count")
  shareCount             Int      @default(0) @map("share_count")
  completionRate         Decimal  @default(0.00) @map("completion_rate") @db.Decimal(3, 2)
  
  // Quality flags
  hasDescription         Boolean  @default(false) @map("has_description")
  hasImages              Boolean  @default(false) @map("has_images")
  hasVideos              Boolean  @default(false) @map("has_videos")
  hasMultilingualContent Boolean  @default(false) @map("has_multilingual_content")
  
  lastCalculatedAt       DateTime @default(now()) @map("last_calculated_at")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  @@unique([entityType, entityId])
  @@map("content_quality_scores")
}

model ContentAuditLog {
  id         String    @id @default(uuid()) @db.Uuid
  entityType String    @map("entity_type")
  entityId   String    @map("entity_id") @db.Uuid
  action     String
  oldData    Json?     @map("old_data")
  newData    Json?     @map("new_data")
  userId     String?   @map("user_id") @db.Uuid
  ipAddress  String?   @map("ip_address")
  userAgent  String?   @map("user_agent")
  createdAt  DateTime  @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("content_audit_log")
}

// E-commerce Enhancement Models

model Coupon {
  id                     String    @id @default(uuid()) @db.Uuid
  code                   String    @unique
  name                   Json // Multi-language name
  description            Json? // Multi-language description
  discountType           DiscountType @map("discount_type")
  discountValue          Decimal   @map("discount_value") @db.Decimal(10, 2)
  minimumOrderAmount     Decimal   @default(0) @map("minimum_order_amount") @db.Decimal(10, 2)
  maximumDiscountAmount  Decimal?  @map("maximum_discount_amount") @db.Decimal(10, 2)
  usageLimit             Int?      @map("usage_limit")
  usedCount              Int       @default(0) @map("used_count")
  validFrom              DateTime  @map("valid_from")
  validUntil             DateTime  @map("valid_until")
  isActive               Boolean   @default(true) @map("is_active")
  applicableCategories   String[]  @map("applicable_categories")
  applicableCraftsmen    String[]  @map("applicable_craftsmen")
  createdBy              String?   @map("created_by") @db.Uuid
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  // Relations
  creator User?   @relation(fields: [createdBy], references: [id])
  orders  Order[]

  @@map("coupons")
}

model Promotion {
  id                  String         @id @default(uuid()) @db.Uuid
  name                Json // Multi-language name
  description         Json? // Multi-language description
  promotionType       PromotionType  @map("promotion_type")
  discountPercentage  Decimal?       @map("discount_percentage") @db.Decimal(5, 2)
  buyQuantity         Int?           @map("buy_quantity")
  getQuantity         Int?           @map("get_quantity")
  applicableCategories String[]      @map("applicable_categories")
  validFrom           DateTime       @map("valid_from")
  validUntil          DateTime       @map("valid_until")
  isActive            Boolean        @default(true) @map("is_active")
  createdBy           String?        @map("created_by") @db.Uuid
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt @map("updated_at")

  // Relations
  creator          User?              @relation(fields: [createdBy], references: [id])
  promotionProducts PromotionProduct[]

  @@map("promotions")
}

model PromotionProduct {
  id          String    @id @default(uuid()) @db.Uuid
  promotionId String    @map("promotion_id") @db.Uuid
  productId   String    @map("product_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  promotion Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([promotionId, productId])
  @@map("promotion_products")
}

model ProductReview {
  id                  String    @id @default(uuid()) @db.Uuid
  productId           String    @map("product_id") @db.Uuid
  userId              String    @map("user_id") @db.Uuid
  orderId             String?   @map("order_id") @db.Uuid
  rating              Int
  title               String?
  comment             String?
  images              String[]
  isVerifiedPurchase  Boolean   @default(false) @map("is_verified_purchase")
  helpfulCount        Int       @default(0) @map("helpful_count")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  product             Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  order               Order?               @relation(fields: [orderId], references: [id])
  helpfulnessVotes    ReviewHelpfulness[]

  @@unique([productId, userId, orderId])
  @@map("product_reviews")
}

model ReviewHelpfulness {
  id        String        @id @default(uuid()) @db.Uuid
  reviewId  String        @map("review_id") @db.Uuid
  userId    String        @map("user_id") @db.Uuid
  isHelpful Boolean       @map("is_helpful")
  createdAt DateTime      @default(now()) @map("created_at")

  // Relations
  review ProductReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
  @@map("review_helpfulness")
}

model InventoryAlert {
  id                String    @id @default(uuid()) @db.Uuid
  productId         String    @map("product_id") @db.Uuid
  craftsmanId       String    @map("craftsman_id") @db.Uuid
  alertType         AlertType @map("alert_type")
  thresholdQuantity Int?      @map("threshold_quantity")
  currentQuantity   Int       @map("current_quantity")
  isAcknowledged    Boolean   @default(false) @map("is_acknowledged")
  acknowledgedAt    DateTime? @map("acknowledged_at")
  createdAt         DateTime  @default(now()) @map("created_at")

  // Relations
  product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  craftsman CraftsmanProfile @relation(fields: [craftsmanId], references: [id], onDelete: Cascade)

  @@map("inventory_alerts")
}

model UserProductInteraction {
  id              String          @id @default(uuid()) @db.Uuid
  userId          String          @map("user_id") @db.Uuid
  productId       String          @map("product_id") @db.Uuid
  interactionType InteractionType @map("interaction_type")
  interactionData Json?           @map("interaction_data")
  createdAt       DateTime        @default(now()) @map("created_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("user_product_interactions")
}

model ProductRecommendation {
  id                    String             @id @default(uuid()) @db.Uuid
  userId                String?            @map("user_id") @db.Uuid
  productId             String             @map("product_id") @db.Uuid
  recommendedProductId  String             @map("recommended_product_id") @db.Uuid
  recommendationType    RecommendationType @map("recommendation_type")
  score                 Decimal            @default(0) @db.Decimal(5, 4)
  createdAt             DateTime           @default(now()) @map("created_at")

  // Relations
  user               User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  product            Product @relation("ProductRecommendations", fields: [productId], references: [id], onDelete: Cascade)
  recommendedProduct Product @relation("RecommendedProducts", fields: [recommendedProductId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, recommendedProductId, recommendationType])
  @@map("product_recommendations")
}

model PushSubscription {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  endpoint   String
  p256dhKey  String   @map("p256dh_key")
  authKey    String   @map("auth_key")
  deviceType String   @default("web") @map("device_type")
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@map("push_subscriptions")
}
// Next
Auth.js 所需的表
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}